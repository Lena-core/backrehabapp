import AsyncStorage from '@react-native-async-storage/async-storage';
import { Alert, Platform } from 'react-native';
import PushNotification from 'react-native-push-notification';
import { PermissionsAndroid } from 'react-native';

class NotificationService {
  constructor() {
    this.isInitialized = false;
    this.scheduledNotifications = new Map();
    console.log('NotificationService: Constructor initialized');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  async initialize() {
    try {
      console.log('NotificationService: Starting initialization...');
      
      // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PushNotification
      PushNotification.configure({
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ foreground
        onNotification: function (notification) {
          console.log('NotificationService: Notification received:', notification);
        },
        
        // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è iOS
        permissions: {
          alert: true,
          badge: true,
          sound: true,
        },
        
        // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (iOS)
        requestPermissions: Platform.OS === 'ios',
      });
      
      // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è Android
      PushNotification.createChannel(
        {
          channelId: 'backrehab-default',
          channelName: 'BackRehab Notifications',
          channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è BackRehab',
          playSound: true,
          soundName: 'default',
          importance: 4,
          vibrate: true,
        },
        (created) => console.log(`NotificationService: Channel created: ${created}`)
      );
      
      this.isInitialized = true;
      console.log('NotificationService: Initialization complete');
      return true;
    } catch (error) {
      console.error('NotificationService: Initialization failed:', error);
      return false;
    }
  }

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async requestPermissions() {
    try {
      console.log('NotificationService: Requesting permissions...');
      
      if (Platform.OS === 'android') {
        // Android 13+: —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ POST_NOTIFICATIONS
        if (Platform.Version >= 33) {
          const granted = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.POST_NOTIFICATIONS
          );
          if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
            console.log('NotificationService: POST_NOTIFICATIONS permission denied');
            return false;
          }
        }
        
        // Android 12+: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ SCHEDULE_EXACT_ALARM
        // –≠—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        if (Platform.Version >= 31) {
          console.log('NotificationService: SCHEDULE_EXACT_ALARM permission required for Android 12+');
          console.log('NotificationService: This permission is granted via AndroidManifest.xml');
        }
        
        return true;
      } else if (Platform.OS === 'ios') {
        // iOS: —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ configure()
        return true;
      }
      
      return true;
    } catch (error) {
      console.error('NotificationService: Permission request failed:', error);
      return false;
    }
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  async scheduleNotificationsFromSettings(notificationSettings) {
    try {
      console.log('NotificationService: Scheduling notifications from settings:', notificationSettings);
      
      // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await this.cancelAllScheduledNotifications();
      
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
      for (const [type, config] of Object.entries(notificationSettings)) {
        if (config.enabled) {
          await this.scheduleNotification(type, config.time);
        }
      }
      
      console.log('NotificationService: All notifications scheduled successfully');
      return true;
    } catch (error) {
      console.error('NotificationService: Failed to schedule notifications:', error);
      return false;
    }
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async scheduleNotification(notificationType, time) {
    try {
      const notificationConfig = this.getNotificationConfig(notificationType);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ (–≤–∞–∂–Ω–æ –¥–ª—è Android)
      const typeIds = {
        exerciseReminders: 1000,
        spineHygieneTips: 2000,
        educationalMessages: 3000
      };
      const notificationId = typeIds[notificationType] || 9999;
      
      console.log(`NotificationService: Scheduling ${notificationType} (ID: ${notificationId}) at ${time.hour}:${time.minute}`);
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const scheduledDate = new Date();
      scheduledDate.setHours(time.hour, time.minute, 0, 0);
      
      console.log(`NotificationService: Current time: ${new Date().toLocaleString()}`);
      console.log(`NotificationService: Scheduled time: ${scheduledDate.toLocaleString()}`);
      
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
      if (scheduledDate.getTime() < Date.now()) {
        scheduledDate.setDate(scheduledDate.getDate() + 1);
        console.log(`NotificationService: Time passed today, scheduling for tomorrow: ${scheduledDate.toLocaleString()}`);
      }

      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      PushNotification.localNotificationSchedule({
        id: notificationId.toString(), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        title: notificationConfig.title,
        message: notificationConfig.body,
        date: scheduledDate,
        repeatType: 'day', // –ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        channelId: 'backrehab-default', // –ö–∞–Ω–∞–ª –¥–ª—è Android
        playSound: true,
        soundName: 'default',
        vibrate: true,
        vibration: 300,
        allowWhileIdle: true, // –í–∞–∂–Ω–æ –¥–ª—è Android - –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Å–Ω–∞
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
      this.scheduledNotifications.set(notificationId, {
        id: notificationId,
        type: notificationType,
        title: notificationConfig.title,
        body: notificationConfig.body,
        scheduledTime: time,
        isActive: true,
        scheduledDate: scheduledDate.toISOString()
      });

      console.log(`NotificationService: Successfully scheduled ${notificationType} with ID ${notificationId}`);
      console.log(`NotificationService: Notification will fire at: ${scheduledDate.toLocaleString()}`);
      return notificationId;
    } catch (error) {
      console.error(`NotificationService: Failed to schedule ${notificationType}:`, error);
      return null;
    }
  }

  // –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async cancelAllScheduledNotifications() {
    try {
      console.log('NotificationService: Canceling all scheduled notifications');
      
      // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      PushNotification.cancelAllLocalNotifications();
      
      // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
      this.scheduledNotifications.clear();
      
      console.log('NotificationService: All notifications canceled');
      return true;
    } catch (error) {
      console.error('NotificationService: Failed to cancel notifications:', error);
      return false;
    }
  }

  // –û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ ID
  async cancelNotification(notificationId) {
    try {
      console.log(`NotificationService: Canceling notification ${notificationId}`);
      
      // –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID
      PushNotification.cancelLocalNotifications({id: notificationId});
      
      this.scheduledNotifications.delete(notificationId);
      
      console.log(`NotificationService: Notification ${notificationId} canceled`);
      return true;
    } catch (error) {
      console.error(`NotificationService: Failed to cancel notification ${notificationId}:`, error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É
  getNotificationConfig(notificationType) {
    const configs = {
      exerciseReminders: {
        title: 'üí™ –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!',
        body: '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–ø–∏–Ω—ã. –í—Å–µ–≥–æ 10-15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å!',
        icon: 'exercise'
      },
      spineHygieneTips: {
        title: 'üßò‚Äç‚ôÄÔ∏è –ü–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–ø–∏–Ω–µ',
        body: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é –æ—Å–∞–Ω–∫—É! –°–¥–µ–ª–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–∞–∑–º–∏–Ω–∫—É –∏ –ø–æ—Ç—è–Ω–∏—Ç–µ—Å—å.',
        icon: 'health'
      },
      educationalMessages: {
        title: 'üéì –ó–Ω–∞–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ',
        body: '–ù–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–∞–∂–Ω–æ—Å—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞.',
        icon: 'education'
      }
    };

    return configs[notificationType] || {
      title: 'BackRehab',
      body: '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      icon: 'default'
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  getScheduledNotifications() {
    return Array.from(this.scheduledNotifications.values());
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  isServiceInitialized() {
    return this.isInitialized;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async sendTestNotification() {
    try {
      console.log('NotificationService: Sending test notification');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      PushNotification.localNotification({
        id: 'test-notification',
        title: 'üèÉ‚Äç‚ôÇÔ∏è BackRehab Test',
        message: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        channelId: 'backrehab-default',
        playSound: true,
        soundName: 'default',
        vibrate: true,
        vibration: 300
      });
      
      return true;
    } catch (error) {
      console.error('NotificationService: Failed to send test notification:', error);
      return false;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ AsyncStorage  
  async saveNotificationSettings(settings) {
    try {
      await AsyncStorage.setItem('notificationSettings', JSON.stringify(settings));
      console.log('NotificationService: Settings saved successfully');
      return true;
    } catch (error) {
      console.error('NotificationService: Failed to save settings:', error);
      return false;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ AsyncStorage
  async loadNotificationSettings() {
    try {
      const settingsJson = await AsyncStorage.getItem('notificationSettings');
      if (settingsJson) {
        const settings = JSON.parse(settingsJson);
        console.log('NotificationService: Settings loaded:', settings);
        return settings;
      }
      return null;
    } catch (error) {
      console.error('NotificationService: Failed to load settings:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (Singleton)
const notificationService = new NotificationService();
export default notificationService;

console.log('NotificationService: Module loaded successfully');
