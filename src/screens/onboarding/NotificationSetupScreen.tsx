// –≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –®–∞–≥ 3/4

import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
} from 'react-native';
import LinearGradient from 'react-native-linear-gradient';
import { useNavigation } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';

import { OnboardingStackParamList, NotificationSettings, NotificationTime } from '../../types';
import { COLORS, GRADIENTS, NOTIFICATION_SETUP_SCREEN } from '../../constants';
import { useOnboarding } from '../../contexts';
import { CustomButton, NotificationCard } from '../../components';

type NotificationSetupNavigationProp = StackNavigationProp<
  OnboardingStackParamList,
  'NotificationSetup'
>;

const NotificationSetupScreen: React.FC = () => {
  const navigation = useNavigation<NotificationSetupNavigationProp>();
  const { onboardingData, setNotificationSettings } = useOnboarding();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const [localSettings, setLocalSettings] = useState<NotificationSettings>(
    onboardingData?.notificationSettings || {
      exerciseReminders: {
        enabled: true,
        time: { hour: 9, minute: 0 },
      },
      spineHygieneTips: {
        enabled: true,
        time: { hour: 14, minute: 0 },
      },
      educationalMessages: {
        enabled: true,
        time: { hour: 20, minute: 0 },
      },
    }
  );

  const handleToggle = (type: keyof NotificationSettings, enabled: boolean) => {
    const updatedSettings = {
      ...localSettings,
      [type]: {
        ...localSettings[type],
        enabled,
      },
    };
    setLocalSettings(updatedSettings);
    setNotificationSettings(updatedSettings);
  };

  const handleTimeChange = (type: keyof NotificationSettings, time: NotificationTime) => {
    const updatedSettings = {
      ...localSettings,
      [type]: {
        ...localSettings[type],
        time,
      },
    };
    setLocalSettings(updatedSettings);
    setNotificationSettings(updatedSettings);
  };

  const handleContinue = () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    setNotificationSettings(localSettings);
    navigation.navigate('Ready');
  };

  const handleBack = () => {
    navigation.goBack();
  };

  return (
    <LinearGradient colors={GRADIENTS.MAIN_BACKGROUND} style={styles.container}>
      <View style={styles.content}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <View style={styles.header}>
          <Text style={styles.title}>{NOTIFICATION_SETUP_SCREEN.title}</Text>
          <Text style={styles.subtitle}>{NOTIFICATION_SETUP_SCREEN.subtitle}</Text>
        </View>

        {/* –ö–∞—Ä—Ç–æ—á–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        <ScrollView
          style={styles.scrollView}
          contentContainerStyle={styles.scrollContent}
          showsVerticalScrollIndicator={false}
        >
          {/* –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö */}
          <NotificationCard
            title={NOTIFICATION_SETUP_SCREEN.types.exerciseReminders.title}
            description={NOTIFICATION_SETUP_SCREEN.types.exerciseReminders.description}
            enabled={localSettings.exerciseReminders.enabled}
            time={localSettings.exerciseReminders.time}
            onToggle={(enabled) => handleToggle('exerciseReminders', enabled)}
            onTimeChange={(time) => handleTimeChange('exerciseReminders', time)}
          />

          {/* –°–æ–≤–µ—Ç—ã –ø–æ –≥–∏–≥–∏–µ–Ω–µ –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞ */}
          <NotificationCard
            title={NOTIFICATION_SETUP_SCREEN.types.spineHygieneTips.title}
            description={NOTIFICATION_SETUP_SCREEN.types.spineHygieneTips.description}
            enabled={localSettings.spineHygieneTips.enabled}
            time={localSettings.spineHygieneTips.time}
            onToggle={(enabled) => handleToggle('spineHygieneTips', enabled)}
            onTimeChange={(time) => handleTimeChange('spineHygieneTips', time)}
          />

          {/* –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã */}
          <NotificationCard
            title={NOTIFICATION_SETUP_SCREEN.types.educationalMessages.title}
            description={NOTIFICATION_SETUP_SCREEN.types.educationalMessages.description}
            enabled={localSettings.educationalMessages.enabled}
            time={localSettings.educationalMessages.time}
            onToggle={(enabled) => handleToggle('educationalMessages', enabled)}
            onTimeChange={(time) => handleTimeChange('educationalMessages', time)}
          />

          {/* –ü–æ—è—Å–Ω–µ–Ω–∏–µ */}
          <View style={styles.infoContainer}>
            <Text style={styles.infoText}>
              üí° –í—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
            </Text>
          </View>
        </ScrollView>

        {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        <View style={styles.buttonContainer}>
          <CustomButton
            title={NOTIFICATION_SETUP_SCREEN.backButton}
            onPress={handleBack}
            variant="outline"
            size="medium"
            style={styles.backButton}
          />
          <CustomButton
            title="–î–∞–ª–µ–µ"
            onPress={handleContinue}
            variant="primary"
            size="medium"
            style={styles.continueButton}
          />
        </View>
      </View>
    </LinearGradient>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  content: {
    flex: 1,
    paddingTop: 60,
    paddingHorizontal: 20,
  },
  header: {
    marginBottom: 24,
    alignItems: 'center',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: COLORS.TEXT_PRIMARY,
    textAlign: 'center',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 14,
    color: COLORS.TEXT_PRIMARY,
    opacity: 0.7,
    textAlign: 'center',
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 20,
  },
  infoContainer: {
    backgroundColor: COLORS.PRIMARY_ACCENT,
    borderRadius: 12,
    padding: 16,
    marginTop: 8,
  },
  infoText: {
    fontSize: 13,
    lineHeight: 20,
    color: COLORS.TEXT_PRIMARY,
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 12,
    paddingVertical: 20,
  },
  backButton: {
    flex: 1,
  },
  continueButton: {
    flex: 1,
  },
});

export default NotificationSetupScreen;
