// –≠–∫—Ä–∞–Ω –ø—Ä–µ–≤—å—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –®–∞–≥ 2/4

import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Dimensions,
} from 'react-native';
import LinearGradient from 'react-native-linear-gradient';
import { useNavigation } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';

import { OnboardingStackParamList, ExerciseSettings, WalkSettings } from '../../types';
import { 
  COLORS, 
  GRADIENTS, 
  EXERCISE_PREVIEW_SCREEN, 
  PAIN_LEVEL_RECOMMENDATIONS,
} from '../../constants';
import { useOnboarding } from '../../contexts';
import { CustomButton } from '../../components';
import { 
  shouldShowExercises,
  formatExerciseSettingsDescription,
  formatWalkSettingsDescription,
} from '../../utils/onboardingUtils';

const { width } = Dimensions.get('window');

type ExercisePreviewNavigationProp = StackNavigationProp<
  OnboardingStackParamList,
  'ExercisePreview'
>;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Slider –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
interface SliderProps {
  label: string;
  value: number;
  min: number;
  max: number;
  step?: number;
  suffix?: string;
  onValueChange: (value: number) => void;
}

const Slider: React.FC<SliderProps> = ({
  label,
  value,
  min,
  max,
  step = 1,
  suffix = '',
  onValueChange,
}) => {
  const handleDecrease = () => {
    if (value > min) {
      onValueChange(value - step);
    }
  };

  const handleIncrease = () => {
    if (value < max) {
      onValueChange(value + step);
    }
  };

  return (
    <View style={styles.sliderContainer}>
      <Text style={styles.sliderLabel}>{label}</Text>
      <View style={styles.sliderControls}>
        <TouchableOpacity
          style={[styles.sliderButton, value <= min && styles.disabledButton]}
          onPress={handleDecrease}
          disabled={value <= min}
        >
          <Text style={styles.sliderButtonText}>‚àí</Text>
        </TouchableOpacity>

        <Text style={styles.sliderValue}>
          {value}{suffix}
        </Text>

        <TouchableOpacity
          style={[styles.sliderButton, value >= max && styles.disabledButton]}
          onPress={handleIncrease}
          disabled={value >= max}
        >
          <Text style={styles.sliderButtonText}>+</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

// –ü—Ä–µ—Å–µ—Ç—ã —Å—Ö–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
const REPS_SCHEMAS = [
  { label: '–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è (2)', value: [2] },
  { label: '–ü–∏—Ä–∞–º–∏–¥–∞ (3-2-1)', value: [3, 2, 1] },
  { label: '–ü–∏—Ä–∞–º–∏–¥–∞ (4-3-2)', value: [4, 3, 2] },
  { label: '–ü–∏—Ä–∞–º–∏–¥–∞ (5-3-2)', value: [5, 3, 2] },
  { label: '–ü–∏—Ä–∞–º–∏–¥–∞ (6-4-2)', value: [6, 4, 2] },
];

const ExercisePreviewScreen: React.FC = () => {
  const navigation = useNavigation<ExercisePreviewNavigationProp>();
  const { onboardingData, setExerciseSettings, setWalkSettings } = useOnboarding();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
  if (!onboardingData) {
    return (
      <LinearGradient colors={GRADIENTS.MAIN_BACKGROUND} style={styles.container}>
        <View style={styles.loadingContainer}>
          <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
        </View>
      </LinearGradient>
    );
  }

  const painLevel = onboardingData.painLevel;
  const showExercises = shouldShowExercises(painLevel);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
  const [customizeSettings, setCustomizeSettings] = useState(false);

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const [localExerciseSettings, setLocalExerciseSettings] = useState<ExerciseSettings>(
    onboardingData.exerciseSettings
  );
  const [localWalkSettings, setLocalWalkSettings] = useState<WalkSettings>(
    onboardingData.walkSettings
  );

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ö–µ–º—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
  const [selectedSchemaIndex, setSelectedSchemaIndex] = useState(() => {
    const index = REPS_SCHEMAS.findIndex(
      schema => JSON.stringify(schema.value) === JSON.stringify(onboardingData.exerciseSettings.repsSchema)
    );
    return index !== -1 ? index : 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3-2-1
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
  const updateExerciseSetting = (key: keyof ExerciseSettings, value: any) => {
    const updated = { ...localExerciseSettings, [key]: value };
    setLocalExerciseSettings(updated);
    setExerciseSettings(updated);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ö–æ–¥—å–±—ã
  const updateWalkSetting = (key: keyof WalkSettings, value: number) => {
    const updated = { ...localWalkSettings, [key]: value };
    setLocalWalkSettings(updated);
    setWalkSettings(updated);
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
  const handleSchemaChange = (index: number) => {
    setSelectedSchemaIndex(index);
    updateExerciseSetting('repsSchema', REPS_SCHEMAS[index].value);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
  const toggleCustomize = () => {
    setCustomizeSettings(!customizeSettings);
  };

  const handleContinue = () => {
    navigation.navigate('NotificationSetup');
  };

  const handleBack = () => {
    navigation.goBack();
  };

  return (
    <LinearGradient colors={GRADIENTS.MAIN_BACKGROUND} style={styles.container}>
      <View style={styles.content}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <View style={styles.header}>
          <Text style={styles.title}>–í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞</Text>
          <Text style={styles.headerSubtitle}>
            –ú—ã –Ω–∞—á–Ω–µ–º —Å —Å–∞–º—ã—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Å–ª–æ–∂–Ω—è—è –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è.
          </Text>
        </View>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
        <ScrollView
          style={styles.scrollView}
          contentContainerStyle={styles.scrollContent}
          showsVerticalScrollIndicator={false}
        >
          {/* –ë–ª–æ–∫ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ –ë–æ–ª—å—à–æ–π –¢—Ä–æ–π–∫–∏ */}
          {showExercises && (
            <View style={styles.bigThreeContainer}>
              <View style={styles.exercisesList}>
                <View style={styles.exerciseItem}>
                  <Text style={styles.bulletPoint}>‚Ä¢</Text>
                  <Text style={styles.exerciseName}>–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏–µ</Text>
                </View>
                <View style={styles.exerciseItem}>
                  <Text style={styles.bulletPoint}>‚Ä¢</Text>
                  <Text style={styles.exerciseName}>–ë–æ–∫–æ–≤–æ–π –º–æ—Å—Ç</Text>
                </View>
                <View style={styles.exerciseItem}>
                  <Text style={styles.bulletPoint}>‚Ä¢</Text>
                  <Text style={styles.exerciseName}>–ü—Ç–∏—Ü–∞-—Å–æ–±–∞–∫–∞</Text>
                </View>
              </View>
            </View>
          )}

          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç—Ä–æ–π –±–æ–ª–∏ */}
          {!showExercises && (
            <View style={styles.warningContainer}>
              <Text style={styles.warningTitle}>
                {EXERCISE_PREVIEW_SCREEN.acuteWarning.title}
              </Text>
              <Text style={styles.warningMessage}>
                {EXERCISE_PREVIEW_SCREEN.acuteWarning.message}
              </Text>
            </View>
          )}

          {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é –±–æ–ª–∏ */}
          <View style={styles.recommendationsContainer}>
            <Text style={styles.sectionTitle}>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</Text>
            <Text style={styles.recommendationsText}>
              {PAIN_LEVEL_RECOMMENDATIONS[painLevel]}
            </Text>
          </View>

          {/* –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ */}
          <View style={styles.programContainer}>
            {/* –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è "–ë–æ–ª—å—à–æ–π –¢—Ä–æ–π–∫–∏" */}
            {showExercises && (
              <View style={styles.programCard}>
                <Text style={styles.programLabel}>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è "–ë–æ–ª—å—à–æ–π –¢—Ä–æ–π–∫–∏"</Text>
                <Text style={styles.programValue}>
                  {localExerciseSettings.repsSchema.length} –ø–æ–¥—Ö–æ–¥–∞: {localExerciseSettings.repsSchema.map((reps, index) => 
                    index === localExerciseSettings.repsSchema.length - 1 
                      ? `${reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏${reps === 1 ? '–µ' : reps < 5 ? '—è' : '–π'}` 
                      : `${reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏${reps === 1 ? '–µ' : reps < 5 ? '—è' : '–π'} - –æ—Ç–¥—ã—Ö - `
                  ).join('')}
                </Text>
                <Text style={styles.programValue}>
                  –≤—Ä–µ–º—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–µ—Ä–∂–∞–Ω–∏—è: {localExerciseSettings.holdTime} —Å–µ–∫
                </Text>
                <Text style={styles.programValue}>
                  –æ—Ç–¥—ã—Ö: {localExerciseSettings.restTime} —Å–µ–∫
                </Text>
              </View>
            )}

            {/* –•–æ–¥—å–±–∞ */}
            <View style={styles.programCard}>
              <Text style={styles.programLabel}>–•–æ–¥—å–±–∞</Text>
              <Text style={styles.programValue}>
                {formatWalkSettingsDescription(localWalkSettings)}
              </Text>
              {!showExercises && (
                <Text style={styles.programNote}>–ï—Å–ª–∏ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –±–æ–ª–∏</Text>
              )}
            </View>
          </View>

          {/* –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–∏—Ä–∞–º–∏–¥–∫–∏ */}
          {showExercises && (
            <View style={styles.pyramidExplanation}>
              <Text style={styles.pyramidTitle}>
                üìä –ü–æ—á–µ–º—É –º—ã –¥–µ–ª–∞–µ–º –ø–æ–¥—Ö–æ–¥—ã ¬´–ø–∏—Ä–∞–º–∏–¥–∫–æ–π¬ª?
              </Text>
              <Text style={styles.pyramidText}>
                –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É –Ω–∏—Å—Ö–æ–¥—è—â–µ–π –ø–∏—Ä–∞–º–∏–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6-4-2 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è). –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è—è –∏–¥–µ–∞–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É –∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–æ–ª–∏.
              </Text>
            </View>
          )}

          {/* –ß–µ–∫–±–æ–∫—Å "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" */}
          <TouchableOpacity
            style={styles.checkboxContainer}
            onPress={toggleCustomize}
            activeOpacity={0.7}
          >
            <View style={[styles.checkbox, customizeSettings && styles.checkboxChecked]}>
              {customizeSettings && <Text style={styles.checkmark}>‚úì</Text>}
            </View>
            <Text style={styles.checkboxLabel}>
              –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            </Text>
          </TouchableOpacity>

          {/* –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –∞–∫—Ç–∏–≤–µ–Ω) */}
          {customizeSettings && (
            <>
              {showExercises && (
                <View style={styles.settingsContainer}>
                  <Text style={styles.sectionTitle}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π</Text>
                  
                  {/* –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è */}
                  <View style={styles.settingCard}>
                    <Slider
                      label="–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è"
                      value={localExerciseSettings.holdTime}
                      min={3}
                      max={10}
                      step={1}
                      suffix=" —Å–µ–∫"
                      onValueChange={(value) => updateExerciseSetting('holdTime', value)}
                    />
                  </View>

                  {/* –°—Ö–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π */}
                  <View style={styles.settingCard}>
                    <Text style={styles.settingLabel}>–°—Ö–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π</Text>
                    <View style={styles.schemaContainer}>
                      {REPS_SCHEMAS.map((schema, index) => (
                        <TouchableOpacity
                          key={index}
                          style={[
                            styles.schemaButton,
                            selectedSchemaIndex === index && styles.schemaButtonSelected,
                          ]}
                          onPress={() => handleSchemaChange(index)}
                        >
                          <Text
                            style={[
                              styles.schemaButtonText,
                              selectedSchemaIndex === index && styles.schemaButtonTextSelected,
                            ]}
                          >
                            {schema.label}
                          </Text>
                        </TouchableOpacity>
                      ))}
                    </View>
                  </View>

                  {/* –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ */}
                  <View style={styles.settingCard}>
                    <Slider
                      label="–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏"
                      value={localExerciseSettings.restTime}
                      min={5}
                      max={30}
                      step={5}
                      suffix=" —Å–µ–∫"
                      onValueChange={(value) => updateExerciseSetting('restTime', value)}
                    />
                  </View>
                </View>
              )}

              {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ–¥—å–±—ã */}
              <View style={styles.settingsContainer}>
                <Text style={styles.sectionTitle}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ–¥—å–±—ã</Text>
                
                {/* –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥—å–±—ã */}
                <View style={styles.settingCard}>
                  <Slider
                    label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏"
                    value={localWalkSettings.duration}
                    min={1}
                    max={60}
                    step={5}
                    suffix=" –º–∏–Ω"
                    onValueChange={(value) => updateWalkSetting('duration', value)}
                  />
                </View>

                {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π */}
                <View style={styles.settingCard}>
                  <Slider
                    label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –≤ –¥–µ–Ω—å"
                    value={localWalkSettings.sessions}
                    min={1}
                    max={5}
                    step={1}
                    suffix=""
                    onValueChange={(value) => updateWalkSetting('sessions', value)}
                  />
                </View>
              </View>
            </>
          )}
        </ScrollView>

        {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        <View style={styles.buttonContainer}>
          <CustomButton
            title={EXERCISE_PREVIEW_SCREEN.backButton}
            onPress={handleBack}
            variant="outline"
            size="medium"
            style={styles.backButton}
          />
          <CustomButton
            title="–î–∞–ª–µ–µ"
            onPress={handleContinue}
            variant="primary"
            size="medium"
            style={styles.continueButton}
          />
        </View>
      </View>
    </LinearGradient>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  content: {
    flex: 1,
    paddingTop: 60,
    paddingHorizontal: 20,
  },
  header: {
    marginBottom: 24,
    alignItems: 'center',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: COLORS.TEXT_PRIMARY,
    textAlign: 'center',
  },
  headerSubtitle: {
    fontSize: 15,
    color: COLORS.TEXT_PRIMARY,
    textAlign: 'center',
    marginTop: 8,
    opacity: 0.8,
    lineHeight: 22,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 20,
  },
  warningContainer: {
    backgroundColor: COLORS.PAIN_ACUTE,
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
  },
  warningTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: COLORS.TEXT_PRIMARY,
    marginBottom: 8,
  },
  warningMessage: {
    fontSize: 14,
    lineHeight: 20,
    color: COLORS.TEXT_PRIMARY,
  },
  recommendationsContainer: {
    backgroundColor: COLORS.WHITE,
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: COLORS.TEXT_PRIMARY,
    marginBottom: 12,
  },
  recommendationsText: {
    fontSize: 14,
    lineHeight: 22,
    color: COLORS.TEXT_PRIMARY,
    whiteSpace: 'pre-line',
  },
  // –ë–ª–æ–∫ "–ë–æ–ª—å—à–∞—è —Ç—Ä–æ–π–∫–∞"
  bigThreeContainer: {
    backgroundColor: COLORS.WHITE,
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  exercisesList: {
    marginBottom: 0,
  },
  exerciseItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  bulletPoint: {
    fontSize: 20,
    color: COLORS.CTA_BUTTON,
    marginRight: 12,
    fontWeight: 'bold',
  },
  exerciseName: {
    fontSize: 16,
    color: COLORS.TEXT_PRIMARY,
    fontWeight: '500',
  },
  pyramidExplanation: {
    backgroundColor: COLORS.PRIMARY_ACCENT,
    borderRadius: 12,
    padding: 16,
    marginBottom: 20,
  },
  pyramidTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.TEXT_PRIMARY,
    marginBottom: 8,
  },
  pyramidText: {
    fontSize: 14,
    lineHeight: 20,
    color: COLORS.TEXT_PRIMARY,
    opacity: 0.9,
  },
  // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
  programContainer: {
    marginBottom: 20,
  },
  programCard: {
    backgroundColor: COLORS.PRIMARY_ACCENT,
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 2,
    borderColor: COLORS.CTA_BUTTON,
  },
  programLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.TEXT_PRIMARY,
    marginBottom: 8,
  },
  programValue: {
    fontSize: 14,
    lineHeight: 20,
    color: COLORS.TEXT_PRIMARY,
    opacity: 0.9,
  },
  programNote: {
    fontSize: 12,
    color: COLORS.TEXT_PRIMARY,
    opacity: 0.7,
    marginTop: 4,
    fontStyle: 'italic',
  },
  // –ß–µ–∫–±–æ–∫—Å
  checkboxContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 16,
    paddingHorizontal: 12,
    backgroundColor: COLORS.WHITE,
    borderRadius: 12,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  checkbox: {
    width: 24,
    height: 24,
    borderRadius: 6,
    borderWidth: 2,
    borderColor: COLORS.TEXT_INACTIVE,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  checkboxChecked: {
    backgroundColor: COLORS.CTA_BUTTON,
    borderColor: COLORS.CTA_BUTTON,
  },
  checkmark: {
    fontSize: 16,
    fontWeight: 'bold',
    color: COLORS.TEXT_PRIMARY,
  },
  checkboxLabel: {
    flex: 1,
    fontSize: 16,
    fontWeight: '500',
    color: COLORS.TEXT_PRIMARY,
    lineHeight: 20,
  },
  // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  settingsContainer: {
    marginBottom: 20,
  },
  settingCard: {
    backgroundColor: COLORS.WHITE,
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  settingLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.TEXT_PRIMARY,
    marginBottom: 12,
  },
  // Slider —Å—Ç–∏–ª–∏
  sliderContainer: {
    marginBottom: 8,
  },
  sliderLabel: {
    fontSize: 14,
    fontWeight: '500',
    color: COLORS.TEXT_PRIMARY,
    marginBottom: 12,
  },
  sliderControls: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  sliderButton: {
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: COLORS.CTA_BUTTON,
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  disabledButton: {
    backgroundColor: COLORS.TEXT_INACTIVE,
    opacity: 0.5,
  },
  sliderButtonText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: COLORS.TEXT_PRIMARY,
  },
  sliderValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: COLORS.TEXT_PRIMARY,
    minWidth: 80,
    textAlign: 'center',
  },
  // –°—Ö–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
  schemaContainer: {
    gap: 8,
  },
  schemaButton: {
    backgroundColor: COLORS.SCALE_COLOR,
    borderRadius: 8,
    padding: 12,
    borderWidth: 2,
    borderColor: 'transparent',
  },
  schemaButtonSelected: {
    backgroundColor: COLORS.CTA_BUTTON,
    borderColor: COLORS.TEXT_PRIMARY,
  },
  schemaButtonText: {
    fontSize: 14,
    fontWeight: '500',
    color: COLORS.TEXT_PRIMARY,
    textAlign: 'center',
  },
  schemaButtonTextSelected: {
    fontWeight: '600',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 12,
    paddingVertical: 20,
  },
  backButton: {
    flex: 1,
  },
  continueButton: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: COLORS.TEXT_PRIMARY,
    opacity: 0.7,
  },
});

export default ExercisePreviewScreen;
